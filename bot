import os
import time
import platform
import threading
import telebot
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# Funciones auxiliares necesarias
from main import detectar_fila_inicio, enviar_datos_a_api

# === Configuraci√≥n del segundo bot ===
TOKEN_2 = '7922512452:AAGhfzYMzhJPfV1TA1dBy2w6hICCIXHdNds'
bot2 = telebot.TeleBot(TOKEN_2)

# === Ruta multiplataforma para descarga ===
if platform.system() == "Windows":
    DOWNLOAD_FOLDER = os.path.join(os.getcwd(), "descargas")
else:
    DOWNLOAD_FOLDER = "/mnt/data"
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# === Opciones del navegador ===
options = webdriver.ChromeOptions()
prefs = {
    "download.default_directory": DOWNLOAD_FOLDER,
    "download.prompt_for_download": False,
    "profile.default_content_settings.popups": 0,
    "directory_upgrade": True
}
options.add_experimental_option("prefs", prefs)
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')

# === Barra visual de progreso ===
def barra(seg, total=10, largo=10):
    llenado = int((seg / total) * largo)
    porcentaje = int((seg / total) * 100)
    return 'üü¶' * llenado + '‚¨úÔ∏è' * (largo - llenado) + f' ({porcentaje}%)'

# === Actualizar mensaje con progreso ===
def actualizar_mensaje(bot, chat_id, msg_id, estado_actual, barra_progreso=""):
    pasos = {
        1: "üîë Iniciando sesi√≥n...",
        2: "üìÅ Entrando al m√≥dulo...",
        3: "üîç Filtrando informaci√≥n...",
        4: "üìÑ Exportando archivo...",
        5: "‚è≥ Descargando archivo...",
        6: "‚úÖ Finalizando proceso..."
    }
    texto = f"üöÄ Ejecutando...\n\n{pasos.get(estado_actual, '‚è≥ Procesando...')} üîÑ"
    if barra_progreso:
        texto += f"\n{barra_progreso}"
    try:
        bot.edit_message_text(texto.strip(), chat_id, msg_id)
    except:
        pass

# === Obtener el archivo m√°s reciente ===
def obtener_ultimo_archivo_xlsx(folder, segundos_max=60):
    ahora = time.time()
    archivos = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(".xlsx")]
    archivos_recientes = [f for f in archivos if ahora - os.path.getmtime(f) < segundos_max]
    return sorted(archivos_recientes, key=os.path.getmtime, reverse=True)[0] if archivos_recientes else None

# === Variables globales ===
modo_activo_2 = False
chat_id_global_2 = None
usuarios_autorizados_2 = {}
CLAVE_ENCENDER_2 = "185946"
CLAVE_APAGAR_2 = "4582"

# === Proceso de exportaci√≥n ===
def exportar_y_enviar_2(chat_id):
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    wait = WebDriverWait(driver, 30)
    progreso_msg = bot2.send_message(chat_id, "üì± Iniciando proceso...")

    try:
        driver.get("https://winbo-phx.azurewebsites.net/login.aspx")
        wait.until(EC.presence_of_element_located((By.ID, "txtUsuario"))).send_keys("brubio")
        wait.until(EC.presence_of_element_located((By.ID, "txtPassword"))).send_keys("M123456789")
        driver.find_element(By.ID, "BtnLoginInicial").click()
        for i in range(1, 6): actualizar_mensaje(bot2, chat_id, progreso_msg.message_id, 1, barra(i, 5)); time.sleep(0.25)

        wait.until(EC.presence_of_element_located((By.ID, "menuSistema")))
        driver.execute_script("AbrirPagi('Paginas/OperadoresBO/misOrdenes.aspx?to=1&nombre=Seguimiento+de+Ordenes&id=74&icono=&edit=S','74');")
        for i in range(1, 6): actualizar_mensaje(bot2, chat_id, progreso_msg.message_id, 2, barra(i, 5)); time.sleep(0.25)

        filtrar_btn = wait.until(EC.presence_of_element_located((By.ID, "BtnFiltrar74")))
        driver.execute_script("arguments[0].click();", filtrar_btn)
        for i in range(1, 11): actualizar_mensaje(bot2, chat_id, progreso_msg.message_id, 3, barra(i)); time.sleep(0.35)

        exportar_btn = wait.until(EC.presence_of_element_located((By.XPATH, "//a[contains(., 'Exportar')]")))
        driver.execute_script("arguments[0].click();", exportar_btn)
        for i in range(1, 11): actualizar_mensaje(bot2, chat_id, progreso_msg.message_id, 4, barra(i)); time.sleep(0.35)

        driver.execute_script("arguments[0].click();", wait.until(EC.presence_of_element_located((By.ID, "spnNotiCampa"))))
        time.sleep(2)
        enlaces = driver.find_elements(By.XPATH, "//p[@class='noti-text']/a[contains(@href, '.xlsx')]")
        if not enlaces:
            bot2.edit_message_text("‚ùå No se encontr√≥ ning√∫n archivo .xlsx.", chat_id, progreso_msg.message_id)
            return
        driver.get(enlaces[0].get_attribute("href"))

        filename_clean, local_path = None, None
        for i in range(30):
            archivo = obtener_ultimo_archivo_xlsx(DOWNLOAD_FOLDER, 90)
            if archivo:
                filename_clean = os.path.basename(archivo)
                local_path = archivo
                break
            actualizar_mensaje(bot2, chat_id, progreso_msg.message_id, 5, barra(i, 30))
            time.sleep(1)

        if not filename_clean:
            bot2.edit_message_text("‚ùå El archivo no se descarg√≥ correctamente.", chat_id, progreso_msg.message_id)
            return

        fila_inicio = detectar_fila_inicio(local_path)
        if fila_inicio is None:
            raise ValueError("No se encontr√≥ la fila de inicio.")

        df = pd.read_excel(local_path, skiprows=fila_inicio - 1, engine="openpyxl")
        df.columns = df.columns.str.strip()

        if not df.empty:
            enviar_datos_a_api(df)
            bot2.edit_message_text(f"‚úÖ Archivo exportado y procesado correctamente.\nüìé Nombre: `{filename_clean}`", chat_id, progreso_msg.message_id, parse_mode="Markdown")
        else:
            bot2.edit_message_text("‚ö†Ô∏è El archivo exportado est√° vac√≠o o mal estructurado.", chat_id, progreso_msg.message_id)

    except Exception as e:
        bot2.edit_message_text(f"‚ö†Ô∏è Error durante el proceso:\n{e}", chat_id, progreso_msg.message_id)
    finally:
        driver.quit()

# === Bucle autom√°tico ===
def bucle_automatico_2():
    while True:
        if modo_activo_2 and chat_id_global_2:
            try:
                bot2.send_message(chat_id_global_2, "‚è≥ Iniciando proceso autom√°tico...")
                exportar_y_enviar_2(chat_id_global_2)
                bot2.send_message(chat_id_global_2, "‚úÖ Proceso autom√°tico terminado.")
            except Exception as e:
                bot2.send_message(chat_id_global_2, f"‚ö†Ô∏è Error en autom√°tico:\n{e}")
        time.sleep(120)

# === Comandos del bot ===
@bot2.message_handler(commands=['start'])
def start_handler(msg):
    bot2.send_message(msg.chat.id, "Hola, este es el segundo bot de exportaci√≥n autom√°tica.")

@bot2.message_handler(commands=['exportar'])
def exportar_handler(msg):
    exportar_y_enviar_2(msg.chat.id)

@bot2.message_handler(commands=['encender'])
def encender_handler(msg):
    global modo_activo_2, chat_id_global_2

    if msg.chat.id not in usuarios_autorizados_2:
        bot2.send_message(msg.chat.id, "üîê Env√≠a la clave para activar el modo autom√°tico.")
        return

    if modo_activo_2:
        try:
            chat_info = bot2.get_chat(chat_id_global_2)
            nombre_activador = f"{chat_info.first_name or ''} {chat_info.last_name or ''}".strip()
            bot2.send_message(
                msg.chat.id,
                f"‚ö†Ô∏è El modo autom√°tico ya est√° activado por {nombre_activador} (ID: `{chat_id_global_2}`)",
                parse_mode="Markdown"
            )
        except:
            bot2.send_message(
                msg.chat.id,
                f"‚ö†Ô∏è El modo autom√°tico ya est√° activado por otro usuario (ID: `{chat_id_global_2}`)",
                parse_mode="Markdown"
            )
        return

    modo_activo_2 = True
    chat_id_global_2 = msg.chat.id
    nombre = f"{msg.from_user.first_name or ''} {msg.from_user.last_name or ''}".strip()
    bot2.send_message(
        msg.chat.id,
        f"‚úÖ Modo autom√°tico ACTIVADO por {nombre} (ID: `{msg.chat.id}`)",
        parse_mode="Markdown"
    )

@bot2.message_handler(commands=['apagar'])
def apagar_handler(msg):
    global modo_activo_2, chat_id_global_2
    bot2.send_message(msg.chat.id, "üîê Env√≠a la clave para apagar.")
    chat_id_global_2 = None
    modo_activo_2 = False
    bot2.send_message(msg.chat.id, "üõë Modo autom√°tico DESACTIVADO.")

@bot2.message_handler(commands=['estado'])
def estado_handler(msg):
    if modo_activo_2 and chat_id_global_2:
        try:
            chat_info = bot2.get_chat(chat_id_global_2)
            nombre_usuario = f"{chat_info.first_name or ''} {chat_info.last_name or ''}".strip()
            bot2.send_message(
                msg.chat.id,
                f"‚úÖ *Modo autom√°tico est√° ACTIVADO*.\nüë§ Activado por: `{nombre_usuario}` (ID: `{chat_id_global_2}`)",
                parse_mode="Markdown"
            )
        except:
            bot2.send_message(msg.chat.id, f"‚úÖ Modo autom√°tico ACTIVADO\n(ID: `{chat_id_global_2}`)", parse_mode="Markdown")
    else:
        bot2.send_message(msg.chat.id, "üõë *Modo autom√°tico est√° DESACTIVADO.*", parse_mode="Markdown")

# Iniciar el bucle
threading.Thread(target=bucle_automatico_2, daemon=True).start()
print("ü§ñ Segundo bot ejecut√°ndose...")
bot2.polling()
